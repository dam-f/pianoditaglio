{"version":3,"sources":["Misura.js","Ordine.js","MisuraPiano.js","Pianoditaglio.js","App.js","serviceWorker.js","index.js"],"names":["Misura","props","react_default","a","createElement","className","numStecche","misuraStecca","type","value","creaComponenteMisura","mis","src_Misura","Ordine","ordine","length","map","MisuraPiano","combPiano","join","Math","round","Number","EPSILON","Pianoditaglio","profilo","barreNeiPacchi","piano","barrePianoUtilizzate","pacchiNecessari","floor","barreNecessarieOltreAiPacchi","mode","pianoPerRender","slice","shift","pop","comb","src_MisuraPiano","flat","App","_useState","useState","steccheCorrente","misuraCorrente","_useState2","Object","slicedToArray","teloCorrente","setTeloCorrente","_useState3","_useState4","ordineSandbox","setOrdine","_useState5","_useState6","pianoDiTaglioDaRenderizzare","setPiano","_useState7","_useState8","_useState9","_useState10","setProfilo","_useState11","maxScarto","minSfrido","larghezzaLama","_useState12","opzioni","setOpzioni","_useState13","_useState14","descMode","setDescMode","_useState15","_useState16","pianoRef","setPianoRef","impostaOpzioni","event","newValue","target","inputName","name","prevValue","impostaMisuraCorrente","id","onChange","onClick","preventDefault","src_Ordine","selected","class","src_Pianoditaglio","modalita","combMigliore","iterazioni","tutteLeComb","combTemp","pianoDiTaglioCompleto","barreUtilizzate","scartoTotale","barreDaRecuperareAllaFine","ciStaAncora","misura","barraRimanente","lungTemp","reduce","b","continua","quanteBarreConQuestaComb","numBarreConQuestaComb","hoFinitoDiTagliareUnaMisura","combFittizia","ordineFittizio","i","misuraDaTogliereDallOrdine","hoFinitoDiTagliareUnaMisuraFittizia","j","console","log","nonVaBeneCosi","push","abs","splice","pianoDiTaglio","arrayMisure","forEach","e","sort","misPiccola","numTagliMassimi","k","tempArrCombLength","barraRimasta","window","confirm","newComb","creaTutteLeCombPossibili","allCombs","bestComb","scartoBestComb","scartoThisComb","trovaCombMigliore","tempComb","statistichePiano","unshift","Boolean","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c863deb7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Misura(props) {\r\n  return (\r\n    <div className=\"bb b--black-30 pl3 flex justify-between pr3 items-center\">\r\n      <p>\r\n        - <strong>{props.numStecche}</strong> stecche da{\" \"}\r\n        <strong>{props.misuraStecca}</strong> cm\r\n      </p>\r\n\r\n      <small className=\"\">\r\n        <input className=\"\" type=\"button\" value=\"elimina\" />\r\n      </small>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Misura;\r\n","import React from \"react\";\r\nimport Misura from \"./Misura\";\r\n\r\nfunction creaComponenteMisura(mis) {\r\n  return <Misura numStecche={mis[0]} misuraStecca={mis[1]} />;\r\n}\r\n\r\nfunction Ordine(props) {\r\n  if (props.ordine && props.ordine.length>0) {\r\n    return (\r\n      <div className=\"bg-white pa2 br4 pb4 bb bw2\">\r\n        {props.ordine.map(creaComponenteMisura)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return(\r\n      <div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Ordine;\r\n","import React from \"react\";\r\n\r\n//[ 93, \"barre tagliate così: \",[199.2,199.2,139.2,109.2],\" con scarto: \",3.2000000000000455]\r\n\r\nfunction MisuraPiano(props) {\r\n  return (\r\n    <div className=\"bb b--black-30 pl3 flex justify-between pr3 items-center\">\r\n      <p>\r\n        - <strong>{props.combPiano[0]}</strong> barre tagliate così:{\" \"}\r\n        <strong>{props.combPiano[2].join(\", \")}</strong>\r\n        <br />\r\n        (scarto {Math.round(props.combPiano[4] * 100 + Number.EPSILON) /\r\n          100}{\" \"}\r\n        cm)\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MisuraPiano;\r\n","import React from \"react\";\r\nimport MisuraPiano from \"./MisuraPiano\";\r\n\r\n/*\r\nlet exampleOutput = [\r\n  [ \"Barre utilizzate: \", 329, \"Scarto totale: \", 3018.000000000002, \"menoScarto\"],\r\n  [ 93, \"barre tagliate così: \",[199.2,199.2,139.2,109.2],\" con scarto: \",3.2000000000000455],\r\n  [ 155,\"barre tagliate così: \",[139.2,139.2,139.2,139.2,89.2],\" con scarto: \",4],\r\n  [ 62, \"barre tagliate così: \",[119.2,119.2,119.2,109.2,89.2,89.2],\" con scarto: \",4.7999999999999545],\r\n  [ 15, \"barre tagliate così: \",[119.2,119.2,119.2,109.2,109.2],\" con scarto: \",74],\r\n  [ 4,  \"barre tagliate così: \",[119.2,119.2,119.2,119.2],\" con scarto: \",173.2],\r\n  \"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",\r\n  [139.2,89.2,109.2,119.2]\r\n]\r\n*/\r\n\r\nfunction Pianoditaglio(props) {\r\n  function creaComponenteMisura(comb) {\r\n    if (comb[0] !== 0) {\r\n      return <MisuraPiano combPiano={comb} />;\r\n    }\r\n  }\r\n\r\n  let profilo = props.profilo;\r\n  let barreNeiPacchi = 0;\r\n\r\n  if (profilo === \"AL/1\") {\r\n    barreNeiPacchi = 50;\r\n  } else if (profilo === \"AC/6\") {\r\n    barreNeiPacchi = 10;\r\n  } else if (profilo === \"AL/2HD\") {\r\n    barreNeiPacchi = 15;\r\n  } else if (profilo === \"AL/2\") {\r\n    barreNeiPacchi = 30;\r\n  }\r\n\r\n  if (props.piano) {\r\n    const piano = props.piano;\r\n\r\n    const barrePianoUtilizzate = piano[0][1];\r\n    const scartoPianoTotale = piano[0][3];\r\n    const pacchiNecessari = Math.floor(barrePianoUtilizzate / barreNeiPacchi);\r\n    const barreNecessarieOltreAiPacchi = barrePianoUtilizzate % barreNeiPacchi;\r\n    const mode = piano[0][4]\r\n\r\n    let pianoPerRender = piano.slice(0);\r\n\r\n    \r\n\r\n    //console.log(pianoPerRender);\r\n\r\n    pianoPerRender.shift();\r\n    pianoPerRender.pop();\r\n    pianoPerRender.pop();\r\n\r\n    //FARE UNA FUNZIONE che si passa le stecche avanzate da tagliare e riunisce le misure guali con un 3x davanti (se ad es. la misura è ripetuta 3 volte). for loop con se le due misure sono uguali una viene splice-ata e l'altra si aggiunge un numx dove il nume parte da 1(x tutte le misure, in automatico, e poi aggiunge a num++)\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"bg-white pa2 br4 pb4 bb bw2\">\r\n          <p className=\"tc bb b--black-30\">\r\n            BARRE NECESSARIE: <strong>{barrePianoUtilizzate}</strong> (\r\n            <strong>{pacchiNecessari}</strong> pacchi e{\" \"}\r\n            <strong>{barreNecessarieOltreAiPacchi}</strong> stecche) - Modalità: <strong>{mode}</strong>\r\n            <br />\r\n            <br />\r\n          </p>\r\n          {pianoPerRender.map(creaComponenteMisura)}\r\n          {typeof piano[piano.length-2] === \"string\" && <p className=\"bb b--black-30 pl3 pr3\">\r\n            Poi, cerca tra gli sfridi qualcosa per tagliare ancora queste\r\n            stecche:\r\n            <br />\r\n            <br />\r\n            <strong>{piano[piano.length - 1].flat().join(' ')}</strong>\r\n            <br />\r\n            <br />\r\n          </p>}\r\n        </div>\r\n        {/*La statistica dello scarto sarà riattivata solo quando verrano contati solo gli scarti minori del maxScarto*/}\r\n        {/*<p>Scarto totale sull'intero ordine: {scartoPianoTotale}</p>*/}\r\n        <p>{/*props.piano.map(creaComponenteMisura)*/}</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div />;\r\n  }\r\n}\r\n\r\nexport default Pianoditaglio;\r\n","import React, { useState } from \"react\";\r\nimport Ordine from \"./Ordine\";\r\n//import Opzioni from \"./Opzioni\";\r\nimport Pianoditaglio from \"./Pianoditaglio\";\r\n\r\n//AGGIUNGERE GESTIONE SFRIDI\r\n\r\nfunction App() {\r\n  //VARIABILI CONTROLLATE NELLO STATE\r\n\r\n  const [teloCorrente, setTeloCorrente] = useState({\r\n    steccheCorrente: \"\",\r\n    misuraCorrente: \"\"\r\n  });\r\n\r\n  const [ordineSandbox, setOrdine] = useState([]/*[\r\n    [186, 199.2],\r\n    [714, 139.2],\r\n    [248, 119.2],\r\n    [186, 109.2],\r\n    [280, 89.2]\r\n  ]*/);\r\n\r\n  const [\r\n    pianoDiTaglioDaRenderizzare,\r\n    setPiano\r\n  ] = useState();\r\n\r\n  const [sfridi, setSfridi] = useState([]);\r\n\r\n  const [profilo, setProfilo] = useState(\"AL/1\");\r\n\r\n  const [opzioni, setOpzioni] = useState({\r\n    maxScarto: 25,\r\n    minSfrido: 65,\r\n    larghezzaLama: 0.5,\r\n    mode: \"menoScarto\"\r\n  });\r\n\r\n  const [descMode, setDescMode] = useState(\"Criteri da usare per il calcolo del piano\");\r\n\r\n\r\n  const [pianoRef, setPianoRef] = useState([])\r\n\r\n  //FUNZIONI PER CAMBIARE LE VARIABILI NELLO STATO\r\n\r\n  function impostaOpzioni(event) {\r\n    const newValue = event.target.value;\r\n    const inputName = event.target.name;\r\n    setOpzioni(prevValue => {\r\n      if (inputName === \"opzioneScarto\") {\r\n        return {\r\n          maxScarto: newValue,\r\n          minSfrido: prevValue.minSfrido,\r\n          larghezzaLama: prevValue.larghezzaLama,\r\n          mode: prevValue.mode\r\n        };\r\n      } else if (inputName === \"opzioneSfrido\") {\r\n        return {\r\n          maxScarto: prevValue.maxScarto,\r\n          minSfrido: newValue,\r\n          larghezzaLama: prevValue.larghezzaLama,\r\n          mode: prevValue.mode\r\n        };\r\n      } else if (inputName === \"opzioneLama\") {\r\n        return {\r\n          maxScarto: prevValue.maxScarto,\r\n          minSfrido: prevValue.minSfrido,\r\n          larghezzaLama: newValue,\r\n          mode: prevValue.mode\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  function impostaProfilo(event) {\r\n    const newValue = event.target.value;\r\n    if (newValue === \"AL/1\") {\r\n      setProfilo(\"AL/1\");\r\n    } else if (newValue === \"AC/6\") {\r\n      setProfilo(\"AC/6\");\r\n    } else if (newValue === \"AL/2HD\") {\r\n      setProfilo(\"AL/2HD\");\r\n    } else if (newValue === \"AL/2\") {\r\n      setProfilo(\"AL/2\");\r\n    }\r\n  }\r\n\r\n  function impostaMode(event) {\r\n    const newValue = event.target.value;\r\n    setOpzioni(prevValue => {\r\n        return {\r\n            maxScarto: prevValue.maxScarto,\r\n            minSfrido: prevValue.minSfrido,\r\n            larghezzaLama: prevValue.larghezzaLama,\r\n            mode: newValue\r\n          };\r\n      });\r\n    if (newValue === \"menoBarre\") {\r\n      setDescMode(\"Usa meno barre possibili senza preoccuparsi dello scarto\")\r\n      setOpzioni(prevValue => {\r\n        return {\r\n        maxScarto: 650,\r\n        minSfrido: 0,\r\n        larghezzaLama: prevValue.larghezzaLama,\r\n        mode: newValue\r\n        }\r\n      });\r\n      //aggiungere set opzioni per cambiare i valori di max scarto e min scarto\r\n    } else if (newValue === \"acra\") {\r\n      setDescMode(\"Calcola solo le barre necessarie senza creare combinazioni di misura sulla stessa barra\")\r\n      setOpzioni(prevValue => {\r\n        return {\r\n        maxScarto: 30,\r\n        minSfrido: 65,\r\n        larghezzaLama: prevValue.larghezzaLama,\r\n        mode: newValue\r\n        }\r\n      });\r\n    } else if (newValue === \"menoScarto\") {\r\n      setDescMode(\"Crea un piano di taglio che produca il minor scarto possibile\")\r\n      setOpzioni(prevValue => {\r\n        return {\r\n        maxScarto: 25,\r\n        minSfrido: 65,\r\n        larghezzaLama: prevValue.larghezzaLama,\r\n        mode: newValue\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  function impostaMisuraCorrente(event) {\r\n    const newValue = event.target.value;\r\n    const inputName = event.target.name;\r\n    setTeloCorrente(prevValue => {\r\n      if (inputName === \"numStecche\") {\r\n        return {\r\n          steccheCorrente: newValue,\r\n          misuraCorrente: prevValue.misuraCorrente\r\n        };\r\n      } else if (inputName === \"misura\") {\r\n        return {\r\n          steccheCorrente: prevValue.steccheCorrente,\r\n          misuraCorrente: newValue\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  function aggiungiMisuraCorrente(event) {\r\n    event.preventDefault();\r\n    setOrdine(prevValue => {\r\n      if (\r\n        teloCorrente.steccheCorrente &&\r\n        teloCorrente.misuraCorrente &&\r\n        (teloCorrente.steccheCorrente > 0 && teloCorrente.misuraCorrente > 0)\r\n      ) {\r\n        // const st = Number()\r\n        return [\r\n          ...prevValue,\r\n          [\r\n            Number(teloCorrente.steccheCorrente),\r\n            Number(teloCorrente.misuraCorrente)\r\n          ]\r\n        ];\r\n      } else {\r\n        return prevValue;\r\n      }\r\n    });\r\n    setTeloCorrente({\r\n      steccheCorrente: \"\",\r\n      misuraCorrente: \"\"\r\n    });\r\n  }\r\n\r\n\r\n  function aggiungiPianoEsempio(event) {\r\n    const newValue = event.target.value;\r\n    if (newValue === \"sample1\") {\r\n      setOrdine([\r\n        [182, 199.2],\r\n        [699, 139.2],\r\n        [235, 119.2],\r\n        [156, 109.2],\r\n        [273, 89.2]\r\n      ]);\r\n      setPianoRef(<div className=\"h1 green\"><strong className=\"tc black\">REFERENCE SAMPLE 1 - versione 0.3 - 18.929 iterazioni</strong><p></p><p><Pianoditaglio \r\n        piano={[[\"Barre utilizzate: \",317,\"Scarto totale: \",3413.6000000000013,\"Meno scarto possibile\"],[91,\"barre tagliate così: \",[199.2,199.2,139.2,109.2],\" con scarto: \",3.2000000000000455],[152,\"barre tagliate così: \",[139.2,139.2,139.2,139.2,89.2],\" con scarto: \",4],[60,\"barre tagliate così: \",[119.2,119.2,119.2,109.2,89.2,89.2],\" con scarto: \",4.7999999999999545],[2,\"barre tagliate così: \",[119.2,119.2,119.2,109.2,109.2],\" con scarto: \",74],[12,\"barre tagliate così: \",[119.2,119.2,119.2,119.2],\" con scarto: \",173.2],\"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",[[\"-\",1,\"x\",89.2],[\"-\",1,\"x\",109.2],[\"-\",3,\"x\",119.2]]]}\r\n        profilo=\"AL/1\"\r\n        mode=\"menoScarto\"\r\n         />\r\n        </p>\r\n        </div>\r\n        )\r\n    } else if (newValue === \"sample2\") {\r\n      setOrdine([\r\n        [48, 196.7],\r\n        [32, 135.8],\r\n        [37, 81.2],\r\n        [48, 68.2],\r\n        [32, 62.2],\r\n        [37, 48.7]\r\n      ]);\r\n      setPianoRef(<div className=\"h1 green\"><strong className=\"tc black\">REFERENCE SAMPLE 2 - versione 0.3 - 8.940.344 iterazioni</strong><p></p><p><Pianoditaglio \r\n        piano={[[\"Barre utilizzate: \",35,\"Scarto totale: \",118.59999999999741,\"Meno scarto possibile\"],[16,\"barre tagliate così: \",[196.7,135.8,135.8,62.2,48.7,68.2],\" con scarto: \",2.599999999999909],[10,\"barre tagliate così: \",[196.7,196.7,68.2,68.2,48.7,68.2],\" con scarto: \",3.2999999999999545],[8,\"barre tagliate così: \",[81.2,81.2,196.7,81.2,62.2,62.2,81.2],\" con scarto: \",4.099999999999909],[1,\"barre tagliate così: \",[196.7,196.7,48.7,196.7],\" con scarto: \",11.200000000000045],[0,\"barre tagliate così: \",[81.2,81.2,81.2,81.2,81.2,48.7,48.7,48.7,81.2],\" con scarto: \",16.699999999999932],[0,\"barre tagliate così: \",[48.7,48.7,48.7,48.7,48.7,48.7,48.7,48.7,48.7,48.7,48.7],\" con scarto: \",114.30000000000007],\"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",[[\"-\",1,\"x\",68.2],[\"-\",2,\"x\",196.7],[\"-\",1,\"x\",81.2],[\"-\",1,\"x\",48.7]]]}\r\n        profilo=\"AL/1\"\r\n        mode=\"menoScarto\"\r\n         />\r\n        </p>\r\n        </div>\r\n        )\r\n    } else if (newValue === \"sample3\") {\r\n      setOrdine([\r\n        [182, 199.2],\r\n        [699, 139.2],\r\n        [235, 119.2],\r\n        [156, 109.2],\r\n        [273, 89.2],\r\n        [159, 50],\r\n        [200, 35.1]\r\n      ]);\r\n      setPianoRef(<div className=\"h1 green\"><strong className=\"tc black\">REFERENCE STRESS TEST - versione 0.3 - 35.697.301 iterazioni</strong><p></p><p><Pianoditaglio \r\n        piano={[[\"Barre utilizzate: \",337,\"Scarto totale: \",1782.8000000000018,\"Meno scarto possibile\"],[60,\"barre tagliate così: \",[199.2,199.2,50,199.2],\" con scarto: \",2.400000000000091],[99,\"barre tagliate così: \",[139.2,139.2,139.2,50,35.1,35.1,109.2],\" con scarto: \",3],[1,\"barre tagliate così: \",[119.2,119.2,139.2,35.1,109.2,35.1,89.2],\" con scarto: \",3.799999999999841],[100,\"barre tagliate così: \",[139.2,139.2,139.2,139.2,89.2],\" con scarto: \",4],[56,\"barre tagliate così: \",[119.2,119.2,119.2,109.2,89.2,89.2],\" con scarto: \",4.7999999999999545],[20,\"barre tagliate così: \",[119.2,119.2,119.2,89.2,89.2,89.2],\" con scarto: \",24.799999999999955],[1,\"barre tagliate così: \",[119.2,119.2,119.2,119.2],\" con scarto: \",173.2],\"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",[[\"-\",1,\"x\",199.2],[\"-\",3,\"x\",139.2],[\"-\",3,\"x\",119.2]]]}\r\n        profilo=\"AL/1\"\r\n        mode=\"menoScarto\"\r\n         />\r\n        </p>\r\n        </div>\r\n        )\r\n    } else if (newValue === \"sample4\") {\r\n      setOrdine([\r\n        [182, 199.2],\r\n        [699, 139.2],\r\n        [235, 119.2],\r\n        [156, 109.2],\r\n        [273, 89.2]\r\n      ]);\r\n    }\r\n    \r\n  }\r\n\r\n  //FUNZIONONA PIANO DI TAGLIO\r\n  //PER IL MOMENTO QUESTA CALCOLA LA SOLUZIONE CON MENO SCARTO\r\n\r\n  //creare un comando per cui si può scegliere tra: soluzione con minor scarto (lasciando sfridi più lunghi di tot), soluzione con minor numero di tagli(per quando si ha fretta), soluzione che usa meno barre intere\r\n  function pianoSandbox() {\r\n    if(ordineSandbox.length>0) {\r\n\r\n      // VARIABILI NON MONITORATE\r\n\r\n      let modalita;\r\n\r\n      if (opzioni.mode === \"menoScarto\") {\r\n      modalita = \"Meno scarto possibile\"\r\n      } else if (opzioni.mode === \"menoBarre\") {\r\n      modalita = \"Meno barre possibili\"\r\n       } else if (opzioni.mode === \"acra\") {\r\n      modalita = \"Calcolo barre per acra\"\r\n      }\r\n\r\n      setPiano([])\r\n      let iterazioni = 0\r\n\r\n      let ordineDaAnalizzare = ordineSandbox;\r\n\r\n      let tutteLeComb = [];\r\n      let combTemp = [];\r\n      let combMigliore;\r\n      let pianoDiTaglioCompleto = [];\r\n\r\n      let barreUtilizzate = 0;\r\n      let scartoTotale = 0;\r\n\r\n      let barreDaRecuperareAllaFine = [];\r\n\r\n      function ciStaAncora(misura, comb, barraRimanente = 650) {\r\n        let lungTemp =\r\n          comb.reduce(function(a, b) {\r\n            return a + b;\r\n          }, 0) +\r\n          opzioni.larghezzaLama * comb.length;\r\n        if (\r\n          misura < 650 - lungTemp &&\r\n          (650 - lungTemp - misura > opzioni.minSfrido ||\r\n            650 - lungTemp - misura < opzioni.maxScarto)\r\n        ) {\r\n          //console.log(\"ci sta ancora!\");\r\n          return true;\r\n        } else {\r\n          //console.log(`comb ${comb}: la misura ${misura} non sta più nei ${650-lungTemp} che rimangono alla barra, che era lunga ${barraRimanente}`);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      function aggiungiCombConMisura(misura) {\r\n        combTemp = [];\r\n        combTemp.push(misura);\r\n      }\r\n      \r\n\r\n      let continua = true\r\n      //questa si deve migliorare facendo in modo che vada ad operare solo sul livello di combo aggiunto in precedenza\r\n      function creaTutteLeCombPossibili(arrayMisure) {\r\n        let misPiccola = arrayMisure[arrayMisure.length - 1];\r\n\r\n        // PER OGNI MISURA CREO UNA NUOVA COMB\r\n        for (let i = 0; i < arrayMisure.length; i++) {\r\n          aggiungiCombConMisura(arrayMisure[i]);\r\n          tutteLeComb.push(combTemp);\r\n        }\r\n        //il numero dei loop che eseguo sotto è determinato dal numero massimo di tagli che posso fare in una singola barra, e cioé barra/misura più piccola dell'ordine\r\n        let numTagliMassimi = Math.round(650 / (misPiccola + 0.5));\r\n        //ad ogni giro si passa tutte le combiniazioni esistenti e aggiunge una combinazione per ogni misura dell'ordinead ognuna di esse.\r\n        if (continua) {\r\n          for (let k = 0; k < numTagliMassimi; k++) {\r\n          let tempArrCombLength = tutteLeComb.length;\r\n          for (let i = 0; i < tempArrCombLength; i++) {\r\n            let barraRimasta =\r\n              650 -\r\n              tutteLeComb[i].reduce((a, b) => a + b, 0);\r\n            for (let j = 0; j < arrayMisure.length; j++)\r\n              if (ciStaAncora(arrayMisure[j], tutteLeComb[i], barraRimasta)) {\r\n                iterazioni++\r\n                if (iterazioni === 1000000) {\r\n                  if (window.confirm(\"Hai già raggiunto un milione di iterazioni. Probabilmente l'ordine è molto complesso o contiene almeno una misura molto piccola. Se pensi che il dispositivo su cui stai eseguendo il calcolo sia abbastanza potente, premi OK per continuare\")) {\r\n                    continua = true;\r\n                  } else {\r\n                    continua = false;\r\n                  }\r\n                } else if (iterazioni === 5000000) {\r\n                  if (window.confirm(\"Ora sono cinque milioni di iterazioni. Probabilmente l'ordine è molto complesso o contiene almeno una misura molto piccola. Se pensi che il dispositivo su cui stai eseguendo il calcolo sia abbastanza potente, premi OK per continuare\")) {\r\n                    continua = true;\r\n                  } else {\r\n                    continua = false;\r\n                  }\r\n                }\r\n                if(tutteLeComb[i].length>(k)) {\r\n                  let newComb = tutteLeComb[i].slice(0);\r\n                  newComb.push(arrayMisure[j]);\r\n                  tutteLeComb.push(newComb);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      function trovaCombMigliore(allCombs) {\r\n        let bestComb = [allCombs[0]];\r\n        for (let i = 0; i < allCombs.length; i++) {\r\n          let scartoBestComb =\r\n            650 -\r\n            bestComb[0].reduce(function(a, b) {\r\n              return a + b;\r\n            }, 0);\r\n          let scartoThisComb =\r\n            650 -\r\n            allCombs[i].reduce(function(a, b) {\r\n              return a + b;\r\n            }, 0);\r\n\r\n          if (scartoBestComb > scartoThisComb) {\r\n            //QUESTO SORT NON FUNZIONA????\r\n            bestComb = [allCombs[i].sort(function(a, b) {\r\n              return b[1] - a[1];\r\n            }), scartoThisComb];\r\n          }\r\n        }\r\n        return bestComb;\r\n      }\r\n\r\n      function quanteBarreConQuestaComb(comb, ordine) {\r\n        let numBarreConQuestaComb = 0;\r\n        let hoFinitoDiTagliareUnaMisura = false;\r\n\r\n        let combFittizia = comb[0].slice(0);\r\n        let ordineFittizio = [];\r\n        for (let i = 0; i < ordine.length; i++) {\r\n          ordineFittizio[i] = ordine[i].slice();\r\n        }\r\n        let hoFinitoDiTagliareUnaMisuraFittizia = false;\r\n\r\n        let misuraDaTogliereDallOrdine;\r\n\r\n        \r\n        //qui faccio prima un loop fittizio in cui decido quante barre servirebbero prima di esaurire una delle misure coinvolte, poi se l'ultima barra non è sfruttata completamente decido di tagliarne una di meno e aggiungere le stecche che mancavano al completamento ad un array da gestire poi in altro modo\r\n        while (!hoFinitoDiTagliareUnaMisuraFittizia) {\r\n          for (let i = 0; i < combFittizia.length; i++) {\r\n            for (let j = 0; j < ordineFittizio.length; j++) {\r\n              if (combFittizia[i] === ordineFittizio[j][1]) {\r\n                ordineFittizio[j][0] = ordineFittizio[j][0] - 1;\r\n                if (ordineFittizio[j][0] === 0) {\r\n                  console.log(\r\n                    \"Ho finito di tagliare la misura fittizia \",\r\n                    ordineFittizio[j][1]\r\n                  );\r\n                  hoFinitoDiTagliareUnaMisuraFittizia = true;\r\n                  misuraDaTogliereDallOrdine = ordineFittizio[j][1];\r\n                }\r\n              }\r\n            }\r\n          }\r\n          numBarreConQuestaComb++;\r\n        }\r\n\r\n        /*\r\n        console.log(\r\n          \"MISURA DA TOGLIERE DALL'ORDINE: \",\r\n          misuraDaTogliereDallOrdine\r\n        );\r\n        console.log(\"ORDINE: \" + ordine);\r\n        */\r\n\r\n        // va bene se tutte le barre previste per la combo sono sfruttate appieno, non va bene se l'ultima dà più stecche di quante ne servono\r\n        let nonVaBeneCosi = false;\r\n        for (let i = 0; i < ordineFittizio.length; i++) {\r\n          if (ordineFittizio[i][0] < 0) {\r\n            nonVaBeneCosi = true;\r\n            barreDaRecuperareAllaFine.push([\"-\",Math.abs(ordineFittizio[i][0]),\"x\",ordineFittizio[i][1]]);\r\n          }\r\n        }\r\n        // se non va bene ne taglio una in meno\r\n        if (nonVaBeneCosi) {\r\n          numBarreConQuestaComb--;\r\n        }\r\n        //poi ripeto il ciclo che ho fatto prima in modo fittizio ma questa volta toglie effettivamente dal numero di stecche richiesto nell'ordine le stecche tagliate con questa combo\r\n        if (!nonVaBeneCosi) {\r\n          while (!hoFinitoDiTagliareUnaMisura) {\r\n            for (let i = 0; i < comb[0].length; i++) {\r\n              for (let j = 0; j < ordine.length; j++) {\r\n                if (comb[0][i] === ordine[j][1]) {\r\n                  ordine[j][0] = ordine[j][0] - 1;\r\n                  if (ordine[j][0] === 0) {\r\n                    console.log(\"Ho finito di tagliare la misura \", ordine[j][1]);\r\n                    hoFinitoDiTagliareUnaMisura = true;\r\n                    //COSA MOLTO PERICOLOSA:\r\n                    ordine.splice(j, 1);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            //numBarreConQuestaComb++ TOLTO DA QUI, MESSO DI LA\r\n          }\r\n        } else {\r\n          for (let i = 0; i < numBarreConQuestaComb; i++) {\r\n            for (let i = 0; i < comb[0].length; i++) {\r\n              for (let j = 0; j < ordine.length; j++) {\r\n                if (comb[0][i] === ordine[j][1]) {\r\n                  ordine[j][0] = ordine[j][0] - 1;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        //tolgo la misura di cui ho tutte le stecche tagliate dall'ordine, così da poter ricreare un nuovo insieme di combinazioni che non tenga più conto di quella misura\r\n        for (let i = 0; i < ordine.length; i++) {\r\n          if (ordine[i][1] === misuraDaTogliereDallOrdine) {\r\n            ordine.splice(i, 1);\r\n          }\r\n        }\r\n        /*\r\n        console.log(\"ORDINE DOPO AVER TOLTO MISURA: \" + ordine);\r\n        console.log(\r\n          \"RISULTATO: \" +\r\n            numBarreConQuestaComb +\r\n            \" barre tagliate cosÃ¬:  \" +\r\n            comb[0] +\r\n            \" con scarto: \" +\r\n            comb[1]\r\n        );\r\n        */\r\n\r\n        //CREO UNA RIGA NEL PIANO DI TAGLIO CON QUANTE BARRE DEVO TAGLIARE CON QUESTA COMBO, LE MISURE DELLA COMBO E LO SCARTO\r\n        pianoDiTaglioCompleto.push([\r\n          numBarreConQuestaComb,\r\n          \"barre tagliate così: \",\r\n          comb[0],\r\n          \" con scarto: \",\r\n          comb[1]\r\n        ]);\r\n      }\r\n\r\n      function pianoDiTaglio(ordine) {\r\n        tutteLeComb = [];\r\n\r\n        // creo un array solo delle misure\r\n        const arrayMisure = [];\r\n        ordine.forEach((e, i) => arrayMisure.push(e[1]));\r\n\r\n        // ORDINO L'ARRAY IN BASE ALLE MISURE\r\n        arrayMisure.sort(function(a, b) {\r\n          return b[1] - a[1];\r\n        });\r\n\r\n        \r\n\r\n        if (opzioni.mode !== \"acra\") {\r\n          creaTutteLeCombPossibili(arrayMisure);\r\n          if (!continua) {\r\n            setPiano([])\r\n            return\r\n          }\r\n          combMigliore = trovaCombMigliore(tutteLeComb);\r\n\r\n        //console.log(\"combMigliore: \", combMigliore);\r\n\r\n        quanteBarreConQuestaComb(combMigliore, ordine);\r\n        //console.log(ordine);\r\n        } else {\r\n          for (let i = 0; i < arrayMisure.length; i++) {\r\n            // FARE LA FORMULA PER L'ACRA\r\n            let tempComb = [arrayMisure[i]];\r\n            let barraRimasta =\r\n              650 -\r\n              tempComb.reduce((a, b) => a + b, 0);\r\n            while (ciStaAncora(arrayMisure[i], tempComb, barraRimasta)) {\r\n              tempComb.push(arrayMisure[i])\r\n            }\r\n            combMigliore = [tempComb,(650-tempComb.reduce((a, b) => a + b, 0))]\r\n            quanteBarreConQuestaComb(combMigliore, ordine)\r\n          }\r\n        }\r\n        \r\n\r\n        \r\n\r\n        \r\n\r\n        if (ordine.length > 0) {\r\n          pianoDiTaglio(ordine);\r\n        }\r\n      }\r\n\r\n      function statistichePiano(piano) {\r\n        for (let i = 0; i < piano.length; i++) {\r\n          barreUtilizzate = barreUtilizzate + piano[i][0];\r\n          scartoTotale = scartoTotale + piano[i][4] * piano[i][0];\r\n        }\r\n      }\r\n\r\n      function pianoConStatistiche(ordine) {\r\n        pianoDiTaglio(ordine);\r\n        statistichePiano(pianoDiTaglioCompleto);\r\n        pianoDiTaglioCompleto.unshift([\r\n          \"Barre utilizzate: \",\r\n          barreUtilizzate,\r\n          \"Scarto totale: \",\r\n          scartoTotale,\r\n          modalita\r\n        ]);\r\n        pianoDiTaglioCompleto.push(\r\n          \"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",\r\n          barreDaRecuperareAllaFine\r\n        );\r\n      }\r\n\r\n      pianoConStatistiche(ordineDaAnalizzare);\r\n\r\n      //console.log(pianoDiTaglioCompleto);\r\n\r\n      setPiano(pianoDiTaglioCompleto);\r\n\r\n      console.log(iterazioni)\r\n\r\n      \r\n    }\r\n  }\r\n\r\n  //RENDERING DELLA PAGINA\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap\">\r\n      <div className=\"min-vh-100-l bg-gray pt2 fl w-100-ns w-100-m w-40-l\">\r\n        {/*ORDINE*/}\r\n        <h1 className=\"pl2 pa1 bg-gold w-100\">ORDINE</h1>\r\n        <div className=\"pa3\">\r\n          <form\r\n            className=\"bg- br3 flex items-end pa2\r\n            \"\r\n          >\r\n            <label className=\"mr2\">\r\n              <strong>N. stecche</strong>\r\n              <br />\r\n              <br />\r\n              <input\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n                type=\"number\"\r\n                id=\"numStecche\"\r\n                name=\"numStecche\"\r\n                value={teloCorrente.steccheCorrente}\r\n                onChange={impostaMisuraCorrente}\r\n              />\r\n            </label>\r\n            <label className=\"mr2\">\r\n              <strong>Misura taglio</strong>\r\n              <br />\r\n              <br />\r\n              <input\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n                type=\"number\"\r\n                id=\"misura\"\r\n                name=\"misura\"\r\n                value={teloCorrente.misuraCorrente}\r\n                onChange={impostaMisuraCorrente}\r\n              />\r\n            </label>\r\n            <br />\r\n            <br />\r\n            <label>\r\n              <input\r\n                className=\"input-reset bg-blue white b ba b--black-20 pa2 mb2 db w-100\"\r\n                type=\"submit\"\r\n                value=\"Aggiungi\"\r\n                onClick={aggiungiMisuraCorrente}\r\n              />\r\n            </label>\r\n          </form>\r\n          <br />\r\n          <div className=\"pa2 br4\">\r\n            <Ordine ordine={ordineSandbox} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bg-blue pt2 fl w-100-ns w-100-m w-20-l\">\r\n        {/*Opzioni*/}\r\n        <h1 className=\"pl2 pa1 bg-gold w-100\">OPZIONI</h1>\r\n        <div className=\"flex items-start flex-wrap pa3\">\r\n          <label className=\"w-third pa2\">\r\n            <strong>MODALITÀ</strong>\r\n            <br />\r\n            <br />\r\n            <fieldset\r\n              className=\"input-reset bw0 pa0 w-100\"\r\n              onChange={impostaMode}\r\n            >\r\n              <select\r\n                name=\"mode\"\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              >\r\n                <option value=\"menoScarto\" selected=\"selected\">\r\n                  Scarto minore\r\n                </option>\r\n                <option value=\"menoBarre\">Meno barre</option>\r\n                <option value=\"acra\">Acra</option>\r\n              </select>\r\n            </fieldset>\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              {descMode}\r\n            </small>\r\n          </label>\r\n\r\n          <label className=\"w-third pa2\">\r\n            <strong>PROFILO</strong>\r\n            <br />\r\n            <br />\r\n            <fieldset\r\n              className=\"input-reset bw0 pa0 w-100\"\r\n              onChange={impostaProfilo}\r\n            >\r\n              <select\r\n                name=\"profilo\"\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              >\r\n                <option value=\"AL/1\" selected=\"selected\">\r\n                  AL/1\r\n                </option>\r\n                <option value=\"AC/6\">AC/6</option>\r\n                <option value=\"AL/2HD\">AL/2 HD</option>\r\n                <option value=\"AL/2\">AL/2</option>\r\n              </select>\r\n            </fieldset>\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Info usata per calcolare il numero dei pacchi necessari.\r\n            </small>\r\n          </label>\r\n\r\n          <label className=\"w-third pa2\">\r\n            <strong>SCARTO MAX</strong>\r\n            <br />\r\n            <br />\r\n            <input\r\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              name=\"opzioneScarto\"\r\n              type=\"number\"\r\n              value={opzioni.maxScarto}\r\n              onChange={impostaOpzioni}\r\n            />\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Lunghezza massimo scarto\r\n            </small>\r\n          </label>\r\n          <label className=\"w-third pa2\">\r\n            <strong>SCARTO MIN</strong>\r\n            <br />\r\n            <br />\r\n            <input\r\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              name=\"opzioneSfrido\"\r\n              type=\"number\"\r\n              value={opzioni.minSfrido}\r\n              onChange={impostaOpzioni}\r\n            />\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Lunghezza minima sfrido\r\n            </small>\r\n          </label>\r\n          <label className=\"w-third pa2\">\r\n            <strong>LAMA</strong>\r\n            <br />\r\n            <br />\r\n            <input\r\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              name=\"opzioneLama\"\r\n              type=\"number\"\r\n              value={opzioni.larghezzaLama}\r\n              onChange={impostaOpzioni}\r\n            />\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Larghezza lama (imposta 0.5 per alluminio, 0.2 per acciaio)\r\n            </small>\r\n          </label>\r\n          <label className=\"w-third pa2\">\r\n            <strong>DEBUG</strong>\r\n            <br />\r\n            <br />\r\n            <fieldset\r\n              className=\"input-reset bw0 pa0 w-100\"\r\n              onChange={aggiungiPianoEsempio}\r\n            >\r\n              <select\r\n                name=\"debug\"\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              > \r\n                <option value=\"none\" selected=\"selected\"></option>\r\n                <option value=\"sample1\">\r\n                  Sample 1\r\n                </option>\r\n                <option value=\"sample2\">Sample 2</option>\r\n                <option value=\"sample3\">Stress test</option>\r\n                <option value=\"sample4\">Sample 4</option>\r\n              </select>\r\n            </fieldset>\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n            Aggiunge un ordine di esempio.\r\n            </small>\r\n          </label>\r\n        </div>\r\n        {/*<small className=\"tc self-end\">creato da Damiano nel 2020.</small>*/}\r\n      </div>\r\n      <div className=\"bg-gold pt2 fl w-100 w-100-ns w-100-m w-40-l pa3\">\r\n        <h1 className=\"pl2 pa1\">PIANO</h1>\r\n        <p className=\"pl2 tc\">\r\n          <input\r\n            className=\"input-reset bg-blue b white bw2 bb-black bt-0 bl-0 br-0 pa2 mb2 w-50 br3\"\r\n            type=\"button\"\r\n            name=\"creaPiano\"\r\n            onClick={pianoSandbox}\r\n            value=\"CREA PIANO\"\r\n          />\r\n        </p>\r\n        <Pianoditaglio piano={pianoDiTaglioDaRenderizzare} profilo={profilo} mode={opzioni.mode}/>\r\n        <br /><br />\r\n        {pianoRef}\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}