{"version":3,"sources":["Misura.js","Ordine.js","MisuraPiano.js","Pianoditaglio.js","App.js","serviceWorker.js","index.js"],"names":["Misura","props","react_default","a","createElement","className","numStecche","misuraStecca","type","value","creaComponenteMisura","mis","src_Misura","Ordine","ordine","length","map","MisuraPiano","combPiano","join","Math","round","Number","EPSILON","Pianoditaglio","profilo","barreNeiPacchi","piano","barrePianoUtilizzate","pacchiNecessari","floor","barreNecessarieOltreAiPacchi","pianoPerRender","slice","shift","pop","comb","src_MisuraPiano","App","_useState","useState","steccheCorrente","misuraCorrente","_useState2","Object","slicedToArray","teloCorrente","setTeloCorrente","_useState3","_useState4","ordineSandbox","setOrdine","_useState5","_useState6","pianoDiTaglioDaRenderizzare","setPiano","_useState7","_useState8","_useState9","_useState10","setProfilo","_useState11","maxScarto","minSfrido","larghezzaLama","_useState12","opzioni","setOpzioni","impostaOpzioni","event","newValue","target","inputName","name","prevValue","impostaMisuraCorrente","id","onChange","onClick","preventDefault","src_Ordine","class","selected","combMigliore","iterazioni","tutteLeComb","combTemp","pianoDiTaglioCompleto","barreUtilizzate","scartoTotale","barreDaRecuperareAllaFine","ciStaAncora","misura","barraRimanente","lungTemp","reduce","b","pianoDiTaglio","arrayMisure","forEach","e","i","push","sort","misPiccola","numTagliMassimi","k","tempArrCombLength","barraRimasta","j","newComb","creaTutteLeCombPossibili","numBarreConQuestaComb","hoFinitoDiTagliareUnaMisura","combFittizia","ordineFittizio","misuraDaTogliereDallOrdine","hoFinitoDiTagliareUnaMisuraFittizia","console","log","nonVaBeneCosi","splice","quanteBarreConQuestaComb","allCombs","bestComb","scartoBestComb","scartoThisComb","trovaCombMigliore","statistichePiano","unshift","src_Pianoditaglio","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9a5ceb4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Misura(props) {\r\n  return (\r\n    <div className=\"bb b--black-30 pl3 flex justify-between pr3 items-center\">\r\n      <p>\r\n        - <strong>{props.numStecche}</strong> stecche da{\" \"}\r\n        <strong>{props.misuraStecca}</strong> cm\r\n      </p>\r\n\r\n      <small className=\"\">\r\n        <input className=\"\" type=\"button\" value=\"elimina\" />\r\n      </small>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Misura;\r\n","import React from \"react\";\r\nimport Misura from \"./Misura\";\r\n\r\nfunction creaComponenteMisura(mis) {\r\n  return <Misura numStecche={mis[0]} misuraStecca={mis[1]} />;\r\n}\r\n\r\nfunction Ordine(props) {\r\n  if (props.ordine && props.ordine.length>0) {\r\n    return (\r\n      <div className=\"bg-white pa2 br4 pb4 bb bw2\">\r\n        {props.ordine.map(creaComponenteMisura)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return(\r\n      <div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Ordine;\r\n","import React from \"react\";\r\n\r\n//[ 93, \"barre tagliate così: \",[199.2,199.2,139.2,109.2],\" con scarto: \",3.2000000000000455]\r\n\r\nfunction MisuraPiano(props) {\r\n  return (\r\n    <div className=\"bb b--black-30 pl3 flex justify-between pr3 items-center\">\r\n      <p>\r\n        - <strong>{props.combPiano[0]}</strong> barre tagliate così:{\" \"}\r\n        <strong>{props.combPiano[2].join(\", \")}</strong>\r\n        <br />\r\n        (scarto {Math.round(props.combPiano[4] * 100 + Number.EPSILON) /\r\n          100}{\" \"}\r\n        cm)\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MisuraPiano;\r\n","import React from \"react\";\r\nimport MisuraPiano from \"./MisuraPiano\";\r\n\r\n/*\r\nlet exampleOutput = [\r\n  [ \"Barre utilizzate: \", 329, \"Scarto totale: \", 3018.000000000002],\r\n  [ 93, \"barre tagliate così: \",[199.2,199.2,139.2,109.2],\" con scarto: \",3.2000000000000455],\r\n  [ 155,\"barre tagliate così: \",[139.2,139.2,139.2,139.2,89.2],\" con scarto: \",4],\r\n  [ 62, \"barre tagliate così: \",[119.2,119.2,119.2,109.2,89.2,89.2],\" con scarto: \",4.7999999999999545],\r\n  [ 15, \"barre tagliate così: \",[119.2,119.2,119.2,109.2,109.2],\" con scarto: \",74],\r\n  [ 4,  \"barre tagliate così: \",[119.2,119.2,119.2,119.2],\" con scarto: \",173.2],\r\n  \"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",\r\n  [139.2,89.2,109.2,119.2]\r\n]\r\n*/\r\n\r\nfunction Pianoditaglio(props) {\r\n  function creaComponenteMisura(comb) {\r\n    return <MisuraPiano combPiano={comb} />;\r\n  }\r\n\r\n  let profilo = props.profilo;\r\n  let barreNeiPacchi = 0;\r\n\r\n  if (profilo === \"AL/1\") {\r\n    barreNeiPacchi = 50;\r\n  } else if (profilo === \"AC/6\") {\r\n    barreNeiPacchi = 10;\r\n  } else if (profilo === \"AL/2HD\") {\r\n    barreNeiPacchi = 15;\r\n  } else if (profilo === \"AL/2\") {\r\n    barreNeiPacchi = 30;\r\n  }\r\n\r\n  if (props.piano) {\r\n    const piano = props.piano;\r\n\r\n    const barrePianoUtilizzate = piano[0][1];\r\n    const scartoPianoTotale = piano[0][3];\r\n    const pacchiNecessari = Math.floor(barrePianoUtilizzate / barreNeiPacchi);\r\n    const barreNecessarieOltreAiPacchi = barrePianoUtilizzate % barreNeiPacchi;\r\n\r\n    let pianoPerRender = piano.slice(0);\r\n\r\n    //console.log(pianoPerRender);\r\n\r\n    pianoPerRender.shift();\r\n    pianoPerRender.pop();\r\n    pianoPerRender.pop();\r\n\r\n    //FARE UNA FUNZIONE che si passa le stecche avanzate da tagliare e riunisce le misure guali con un 3x davanti (se ad es. la misura è ripetuta 3 volte). for loop con se le due misure sono uguali una viene splice-ata e l'altra si aggiunge un numx dove il nume parte da 1(x tutte le misure, in automatico, e poi aggiunge a num++)\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"bg-white pa2 br4 pb4 bb bw2\">\r\n          <p className=\"tc bb b--black-30\">\r\n            BARRE NECESSARIE: <strong>{barrePianoUtilizzate}</strong> (\r\n            <strong>{pacchiNecessari}</strong> pacchi e{\" \"}\r\n            <strong>{barreNecessarieOltreAiPacchi}</strong> stecche)\r\n            <br />\r\n            <br />\r\n          </p>\r\n          {pianoPerRender.map(creaComponenteMisura)}\r\n          <p className=\"bb b--black-30 pl3 pr3\">\r\n            Oh, e cerca tra gli sfridi qualcosa per tagliare ancora queste\r\n            stecche:\r\n            <br />\r\n            <br />\r\n            <strong>{piano[piano.length - 1].join(\",  \")}</strong>\r\n            <br />\r\n            <br />\r\n          </p>\r\n        </div>\r\n        {/*La statistica dello scarto sarà riattivata solo quando verrano contati solo gli scarti minori del maxScarto*/}\r\n        {/*<p>Scarto totale sull'intero ordine: {scartoPianoTotale}</p>*/}\r\n        <p>{/*props.piano.map(creaComponenteMisura)*/}</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div />;\r\n  }\r\n}\r\n\r\nexport default Pianoditaglio;\r\n","import React, { useState } from \"react\";\r\nimport Ordine from \"./Ordine\";\r\n//import Opzioni from \"./Opzioni\";\r\nimport Pianoditaglio from \"./Pianoditaglio\";\r\n\r\n//AGGIUNGERE GESTIONE SFRIDI\r\n\r\nfunction App() {\r\n  //VARIABILI CONTROLLATE NELLO STATE\r\n\r\n  const [teloCorrente, setTeloCorrente] = useState({\r\n    steccheCorrente: \"\",\r\n    misuraCorrente: \"\"\r\n  });\r\n\r\n  const [ordineSandbox, setOrdine] = useState([]/*[\r\n    [186, 199.2],\r\n    [714, 139.2],\r\n    [248, 119.2],\r\n    [186, 109.2],\r\n    [280, 89.2]\r\n  ]*/);\r\n\r\n  const [\r\n    pianoDiTaglioDaRenderizzare,\r\n    setPiano\r\n  ] = useState();\r\n\r\n  const [sfridi, setSfridi] = useState([]);\r\n\r\n  const [profilo, setProfilo] = useState(\"AL/1\");\r\n\r\n  const [opzioni, setOpzioni] = useState({\r\n    maxScarto: 15,\r\n    minSfrido: 65,\r\n    larghezzaLama: 0.5\r\n  });\r\n\r\n  //FUNZIONI PER CAMBIARE LE VARIABILI NELLO STATO\r\n\r\n  function impostaOpzioni(event) {\r\n    const newValue = event.target.value;\r\n    const inputName = event.target.name;\r\n    setOpzioni(prevValue => {\r\n      if (inputName === \"opzioneScarto\") {\r\n        return {\r\n          maxScarto: newValue,\r\n          minSfrido: prevValue.minSfrido,\r\n          larghezzaLama: prevValue.larghezzaLama\r\n        };\r\n      } else if (inputName === \"opzioneSfrido\") {\r\n        return {\r\n          maxScarto: prevValue.maxScarto,\r\n          minSfrido: newValue,\r\n          larghezzaLama: prevValue.larghezzaLama\r\n        };\r\n      } else if (inputName === \"opzioneLama\") {\r\n        return {\r\n          maxScarto: prevValue.maxScarto,\r\n          minSfrido: prevValue.minSfrido,\r\n          larghezzaLama: newValue\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  function impostaProfilo(event) {\r\n    const newValue = event.target.value;\r\n    if (newValue === \"AL/1\") {\r\n      setProfilo(\"AL/1\");\r\n    } else if (newValue === \"AC/6\") {\r\n      setProfilo(\"AC/6\");\r\n    } else if (newValue === \"AL/2HD\") {\r\n      setProfilo(\"AL/2HD\");\r\n    } else if (newValue === \"AL/2\") {\r\n      setProfilo(\"AL/2\");\r\n    }\r\n  }\r\n\r\n  function impostaMisuraCorrente(event) {\r\n    const newValue = event.target.value;\r\n    const inputName = event.target.name;\r\n    setTeloCorrente(prevValue => {\r\n      if (inputName === \"numStecche\") {\r\n        return {\r\n          steccheCorrente: newValue,\r\n          misuraCorrente: prevValue.misuraCorrente\r\n        };\r\n      } else if (inputName === \"misura\") {\r\n        return {\r\n          steccheCorrente: prevValue.steccheCorrente,\r\n          misuraCorrente: newValue\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  function aggiungiMisuraCorrente(event) {\r\n    event.preventDefault();\r\n    setOrdine(prevValue => {\r\n      if (\r\n        teloCorrente.steccheCorrente &&\r\n        teloCorrente.misuraCorrente &&\r\n        (teloCorrente.steccheCorrente > 0 && teloCorrente.misuraCorrente > 0)\r\n      ) {\r\n        // const st = Number()\r\n        return [\r\n          ...prevValue,\r\n          [\r\n            Number(teloCorrente.steccheCorrente),\r\n            Number(teloCorrente.misuraCorrente)\r\n          ]\r\n        ];\r\n      } else {\r\n        return prevValue;\r\n      }\r\n    });\r\n    setTeloCorrente({\r\n      steccheCorrente: \"\",\r\n      misuraCorrente: \"\"\r\n    });\r\n  }\r\n\r\n  //FUNZIONONA PIANO DI TAGLIO\r\n  //PER IL MOMENTO QUESTA CALCOLA LA SOLUZIONE CON MENO SCARTO\r\n\r\n  //creare un comando per cui si può scegliere tra: soluzione con minor scarto (lasciando sfridi più lunghi di tot), soluzione con minor numero di tagli(per quando si ha fretta), soluzione che usa meno barre intere\r\n  function pianoSandbox() {\r\n\r\n    let iterazioni = 0\r\n\r\n    let ordineDaAnalizzare = ordineSandbox;\r\n\r\n    let tutteLeComb = [];\r\n    let combTemp = [];\r\n    let combMigliore;\r\n    let pianoDiTaglioCompleto = [];\r\n\r\n    let barreUtilizzate = 0;\r\n    let scartoTotale = 0;\r\n\r\n    let barreDaRecuperareAllaFine = [];\r\n\r\n    function ciStaAncora(misura, comb, barraRimanente = 650) {\r\n      let lungTemp =\r\n        comb.reduce(function(a, b) {\r\n          return a + b;\r\n        }, 0) +\r\n        opzioni.larghezzaLama * comb.length;\r\n      if (\r\n        misura < 650 - lungTemp &&\r\n        (650 - lungTemp - misura > opzioni.minSfrido ||\r\n          650 - lungTemp - misura < opzioni.maxScarto)\r\n      ) {\r\n        //console.log(\"ci sta ancora!\");\r\n        return true;\r\n      } else {\r\n        //console.log(`comb ${comb}: la misura ${misura} non sta più nei ${650-lungTemp} che rimangono alla barra, che era lunga ${barraRimanente}`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function aggiungiCombConMisura(misura) {\r\n      combTemp = [];\r\n      combTemp.push(misura);\r\n    }\r\n\r\n    //questa si deve migliorare facendo in modo che vada ad operare solo sul livello di combo aggiunto in precedenza\r\n    function creaTutteLeCombPossibili(arrayMisure) {\r\n      let misPiccola = arrayMisure[arrayMisure.length - 1];\r\n\r\n      // PER OGNI MISURA CREO UNA NUOVA COMB\r\n      for (let i = 0; i < arrayMisure.length; i++) {\r\n        aggiungiCombConMisura(arrayMisure[i]);\r\n        tutteLeComb.push(combTemp);\r\n      }\r\n      //il numero dei loop che eseguo sotto è determinato dal numero massimo di tagli che posso fare in una singola barra, e cioé barra/misura più piccola dell'ordine\r\n      let numTagliMassimi = Math.round(650 / (misPiccola + 0.5));\r\n      //ad ogni giro si passa tutte le combiniazioni esistenti e aggiunge una combinazione per ogni misura dell'ordinead ognuna di esse.\r\n      for (let k = 0; k < numTagliMassimi; k++) {\r\n        let tempArrCombLength = tutteLeComb.length;\r\n        for (let i = 0; i < tempArrCombLength; i++) {\r\n          let barraRimasta =\r\n            650 -\r\n            tutteLeComb[i].reduce((a, b) => a + b, 0);\r\n          for (let j = 0; j < arrayMisure.length; j++)\r\n            if (ciStaAncora(arrayMisure[j], tutteLeComb[i], barraRimasta)) {\r\n              iterazioni++\r\n              if(tutteLeComb[i].length>(k)) {\r\n                let newComb = tutteLeComb[i].slice(0);\r\n                newComb.push(arrayMisure[j]);\r\n                tutteLeComb.push(newComb);\r\n              }\r\n            }\r\n        }\r\n      }\r\n    }\r\n\r\n    function trovaCombMigliore(allCombs) {\r\n      let bestComb = [allCombs[0]];\r\n      for (let i = 0; i < allCombs.length; i++) {\r\n        let scartoBestComb =\r\n          650 -\r\n          bestComb[0].reduce(function(a, b) {\r\n            return a + b;\r\n          }, 0);\r\n        let scartoThisComb =\r\n          650 -\r\n          allCombs[i].reduce(function(a, b) {\r\n            return a + b;\r\n          }, 0);\r\n\r\n        if (scartoBestComb > scartoThisComb) {\r\n          bestComb = [allCombs[i], scartoThisComb];\r\n        }\r\n      }\r\n      return bestComb;\r\n    }\r\n\r\n    function quanteBarreConQuestaComb(comb, ordine) {\r\n      let numBarreConQuestaComb = 0;\r\n      let hoFinitoDiTagliareUnaMisura = false;\r\n\r\n      let combFittizia = comb[0].slice(0);\r\n      let ordineFittizio = [];\r\n      for (let i = 0; i < ordine.length; i++) {\r\n        ordineFittizio[i] = ordine[i].slice();\r\n      }\r\n      let hoFinitoDiTagliareUnaMisuraFittizia = false;\r\n\r\n      let misuraDaTogliereDallOrdine;\r\n\r\n      //qui faccio prima un loop fittizio in cui decido quante barre servirebbero prima di esaurire una delle misure coinvolte, poi se l'ultima barra non è sfruttata completamente decido di tagliarne una di meno e aggiungere le stecche che mancavano al completamento ad un array da gestire poi in altro modo\r\n      while (!hoFinitoDiTagliareUnaMisuraFittizia) {\r\n        for (let i = 0; i < combFittizia.length; i++) {\r\n          for (let j = 0; j < ordineFittizio.length; j++) {\r\n            if (combFittizia[i] === ordineFittizio[j][1]) {\r\n              ordineFittizio[j][0] = ordineFittizio[j][0] - 1;\r\n              if (ordineFittizio[j][0] === 0) {\r\n                console.log(\r\n                  \"Ho finito di tagliare la misura fittizia \",\r\n                  ordineFittizio[j][1]\r\n                );\r\n                hoFinitoDiTagliareUnaMisuraFittizia = true;\r\n                misuraDaTogliereDallOrdine = ordineFittizio[j][1];\r\n              }\r\n            }\r\n          }\r\n        }\r\n        numBarreConQuestaComb++;\r\n      }\r\n\r\n      /*\r\n      console.log(\r\n        \"MISURA DA TOGLIERE DALL'ORDINE: \",\r\n        misuraDaTogliereDallOrdine\r\n      );\r\n      console.log(\"ORDINE: \" + ordine);\r\n      */\r\n\r\n      // va bene se tutte le barre previste per la combo sono sfruttate appieno, non va bene se l'ultima dà più stecche di quante ne servono\r\n      let nonVaBeneCosi = false;\r\n      for (let i = 0; i < ordineFittizio.length; i++) {\r\n        if (ordineFittizio[i][0] < 0) {\r\n          nonVaBeneCosi = true;\r\n          barreDaRecuperareAllaFine.push(ordineFittizio[i][1]);\r\n        }\r\n      }\r\n      // se non va bene ne taglio una in meno\r\n      if (nonVaBeneCosi) {\r\n        numBarreConQuestaComb--;\r\n      }\r\n      //poi ripeto il ciclo che ho fatto prima in modo fittizio ma questa volta toglie effettivamente dal numero di stecche richiesto nell'ordine le stecche tagliate con questa combo\r\n      if (!nonVaBeneCosi) {\r\n        while (!hoFinitoDiTagliareUnaMisura) {\r\n          for (let i = 0; i < comb[0].length; i++) {\r\n            for (let j = 0; j < ordine.length; j++) {\r\n              if (comb[0][i] === ordine[j][1]) {\r\n                ordine[j][0] = ordine[j][0] - 1;\r\n                if (ordine[j][0] === 0) {\r\n                  console.log(\"Ho finito di tagliare la misura \", ordine[j][1]);\r\n                  hoFinitoDiTagliareUnaMisura = true;\r\n                  //COSA MOLTO PERICOLOSA:\r\n                  ordine.splice(j, 1);\r\n                }\r\n              }\r\n            }\r\n          }\r\n          //numBarreConQuestaComb++ TOLTO DA QUI, MESSO DI LA\r\n        }\r\n      } else {\r\n        for (let i = 0; i < numBarreConQuestaComb; i++) {\r\n          for (let i = 0; i < comb[0].length; i++) {\r\n            for (let j = 0; j < ordine.length; j++) {\r\n              if (comb[0][i] === ordine[j][1]) {\r\n                ordine[j][0] = ordine[j][0] - 1;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      //tolgo la misura di cui ho tutte le stecche tagliate dall'ordine, così da poter ricreare un nuovo insieme di combinazioni che non tenga più conto di quella misura\r\n      for (let i = 0; i < ordine.length; i++) {\r\n        if (ordine[i][1] === misuraDaTogliereDallOrdine) {\r\n          ordine.splice(i, 1);\r\n        }\r\n      }\r\n      /*\r\n      console.log(\"ORDINE DOPO AVER TOLTO MISURA: \" + ordine);\r\n      console.log(\r\n        \"RISULTATO: \" +\r\n          numBarreConQuestaComb +\r\n          \" barre tagliate cosÃ¬:  \" +\r\n          comb[0] +\r\n          \" con scarto: \" +\r\n          comb[1]\r\n      );\r\n      */\r\n\r\n      //CREO UNA RIGA NEL PIANO DI TAGLIO CON QUANTE BARRE DEVO TAGLIARE CON QUESTA COMBO, LE MISURE DELLA COMBO E LO SCARTO\r\n      pianoDiTaglioCompleto.push([\r\n        numBarreConQuestaComb,\r\n        \"barre tagliate così: \",\r\n        comb[0],\r\n        \" con scarto: \",\r\n        comb[1]\r\n      ]);\r\n    }\r\n\r\n    function pianoDiTaglio(ordine) {\r\n      tutteLeComb = [];\r\n\r\n      // creo un array solo delle misure\r\n      const arrayMisure = [];\r\n      ordine.forEach((e, i) => arrayMisure.push(e[1]));\r\n\r\n      // ORDINO L'ARRAY IN BASE ALLE MISURE\r\n      arrayMisure.sort(function(a, b) {\r\n        return b[1] - a[1];\r\n      });\r\n\r\n      creaTutteLeCombPossibili(arrayMisure);\r\n\r\n      combMigliore = trovaCombMigliore(tutteLeComb);\r\n\r\n      //console.log(\"combMigliore: \", combMigliore);\r\n\r\n      quanteBarreConQuestaComb(combMigliore, ordine);\r\n      //console.log(ordine);\r\n\r\n      if (ordine.length > 0) {\r\n        pianoDiTaglio(ordine);\r\n      }\r\n    }\r\n\r\n    function statistichePiano(piano) {\r\n      for (let i = 0; i < piano.length; i++) {\r\n        barreUtilizzate = barreUtilizzate + piano[i][0];\r\n        scartoTotale = scartoTotale + piano[i][4] * piano[i][0];\r\n      }\r\n    }\r\n\r\n    function pianoConStatistiche(ordine) {\r\n      pianoDiTaglio(ordine);\r\n      statistichePiano(pianoDiTaglioCompleto);\r\n      pianoDiTaglioCompleto.unshift([\r\n        \"Barre utilizzate: \",\r\n        barreUtilizzate,\r\n        \"Scarto totale: \",\r\n        scartoTotale\r\n      ]);\r\n      pianoDiTaglioCompleto.push(\r\n        \"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",\r\n        barreDaRecuperareAllaFine\r\n      );\r\n    }\r\n\r\n    pianoConStatistiche(ordineDaAnalizzare);\r\n\r\n    //console.log(pianoDiTaglioCompleto);\r\n\r\n    setPiano(pianoDiTaglioCompleto);\r\n\r\n    console.log(iterazioni)\r\n  }\r\n\r\n  //RENDERING DELLA PAGINA\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap\">\r\n      <div className=\"min-vh-100-l bg-gray pt2 fl w-100-ns w-100-m w-40-l\">\r\n        {/*ORDINE*/}\r\n        <h1 className=\"pl2 pa1 bg-gold w-100\">ORDINE</h1>\r\n        <div className=\"pa3\">\r\n          <form\r\n            className=\"bg- br3 flex items-end pa2\r\n            \"\r\n          >\r\n            <label className=\"mr2\">\r\n              <strong>N. stecche</strong>\r\n              <br />\r\n              <br />\r\n              <input\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n                type=\"number\"\r\n                id=\"numStecche\"\r\n                name=\"numStecche\"\r\n                value={teloCorrente.steccheCorrente}\r\n                onChange={impostaMisuraCorrente}\r\n              />\r\n            </label>\r\n            <label className=\"mr2\">\r\n              <strong>Misura taglio</strong>\r\n              <br />\r\n              <br />\r\n              <input\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n                type=\"number\"\r\n                id=\"misura\"\r\n                name=\"misura\"\r\n                value={teloCorrente.misuraCorrente}\r\n                onChange={impostaMisuraCorrente}\r\n              />\r\n            </label>\r\n            <br />\r\n            <br />\r\n            <label>\r\n              <input\r\n                className=\"input-reset bg-blue white b ba b--black-20 pa2 mb2 db w-100\"\r\n                type=\"submit\"\r\n                value=\"Aggiungi\"\r\n                onClick={aggiungiMisuraCorrente}\r\n              />\r\n            </label>\r\n          </form>\r\n          <br />\r\n          <div className=\"pa2 br4\">\r\n            <Ordine ordine={ordineSandbox} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bg-blue pt2 fl w-100-ns w-100-m w-20-l\">\r\n        {/*Opzioni*/}\r\n        <h1 className=\"pl2 pa1 bg-gold w-100\">OPZIONI</h1>\r\n        <div className=\"flex items-start flex-wrap pa3\">\r\n          <label className=\"w-third pa2\">\r\n            <strong>SCARTO MAX</strong>\r\n            <br />\r\n            <br />\r\n            <input\r\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              name=\"opzioneScarto\"\r\n              type=\"number\"\r\n              value={opzioni.maxScarto}\r\n              onChange={impostaOpzioni}\r\n            />\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Lunghezza massimo scarto\r\n            </small>\r\n          </label>\r\n          <label className=\"w-third pa2\">\r\n            <strong>SCARTO MIN</strong>\r\n            <br />\r\n            <br />\r\n            <input\r\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              name=\"opzioneSfrido\"\r\n              type=\"number\"\r\n              value={opzioni.minSfrido}\r\n              onChange={impostaOpzioni}\r\n            />\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Lunghezza minima sfrido\r\n            </small>\r\n          </label>\r\n          <label className=\"w-third pa2\">\r\n            <strong>LAMA</strong>\r\n            <br />\r\n            <br />\r\n            <input\r\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              name=\"opzioneLama\"\r\n              type=\"number\"\r\n              value={opzioni.larghezzaLama}\r\n              onChange={impostaOpzioni}\r\n            />\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Larghezza lama (imposta 0.5 per alluminio, 0.2 per acciaio):\r\n            </small>\r\n          </label>\r\n          <label className=\"w-third pa2\">\r\n            <strong>PROFILO</strong>\r\n            <br />\r\n            <br />\r\n            <fieldset\r\n              className=\"input-reset bw0 pa0 w-100\"\r\n              onChange={impostaProfilo}\r\n            >\r\n              <select\r\n                name=\"profilo\"\r\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\r\n              >\r\n                <option value=\"AL/1\" selected=\"selected\">\r\n                  AL/1\r\n                </option>\r\n                <option value=\"AC/6\">AC/6</option>\r\n                <option value=\"AL/2HD\">AL/2 HD</option>\r\n                <option value=\"AL/2\">AL/2</option>\r\n              </select>\r\n            </fieldset>\r\n            <small id=\"name-desc\" class=\"f6 db mb2\">\r\n              Info usata per calcolare il numero dei pacchi necessari:\r\n            </small>\r\n          </label>\r\n        </div>\r\n        {/*<small className=\"tc self-end\">creato da Damiano nel 2020.</small>*/}\r\n      </div>\r\n      <div className=\"bg-gold pt2 fl w-100 w-100-ns w-100-m w-40-l pa3\">\r\n        <h1 className=\"pl2 pa1\">PIANO</h1>\r\n        <p className=\"pl2 tc\">\r\n          <input\r\n            className=\"input-reset bg-blue b white bw2 bb-black bt-0 bl-0 br-0 pa2 mb2 w-50 br3\"\r\n            type=\"button\"\r\n            name=\"creaPiano\"\r\n            onClick={pianoSandbox}\r\n            value=\"CREA PIANO\"\r\n          />\r\n        </p>\r\n        <Pianoditaglio piano={pianoDiTaglioDaRenderizzare} profilo={profilo} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}