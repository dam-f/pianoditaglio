{"version":3,"sources":["Misura.js","Ordine.js","MisuraPiano.js","Pianoditaglio.js","App.js","serviceWorker.js","index.js"],"names":["Misura","props","react_default","a","createElement","className","numStecche","misuraStecca","type","value","creaComponenteMisura","mis","src_Misura","Ordine","ordine","map","MisuraPiano","combPiano","join","Math","round","Number","EPSILON","Pianoditaglio","profilo","barreNeiPacchi","piano","barrePianoUtilizzate","pacchiNecessari","floor","barreNecessarieOltreAiPacchi","pianoPerRender","slice","shift","pop","comb","src_MisuraPiano","length","App","_useState","useState","steccheCorrente","misuraCorrente","_useState2","Object","slicedToArray","teloCorrente","setTeloCorrente","_useState3","_useState4","ordineSandbox","setOrdine","_useState5","_useState6","pianoDiTaglioDaRenderizzare","setPiano","_useState7","_useState8","_useState9","_useState10","setProfilo","_useState11","maxScarto","minSfrido","larghezzaLama","_useState12","opzioni","setOpzioni","impostaOpzioni","event","newValue","target","inputName","name","prevValue","impostaMisuraCorrente","id","onChange","onClick","preventDefault","src_Ordine","class","selected","combMigliore","tutteLeComb","combTemp","pianoDiTaglioCompleto","barreUtilizzate","scartoTotale","barreDaRecuperareAllaFine","ciStaAncora","misura","barraRimanente","lungTemp","reduce","b","pianoDiTaglio","arrayMisure","forEach","e","i","push","sort","misPiccola","numTagliMassimi","k","tempArrCombLength","barraRimasta","j","newComb","creaTutteLeCombPossibili","numBarreConQuestaComb","hoFinitoDiTagliareUnaMisura","combFittizia","ordineFittizio","misuraDaTogliereDallOrdine","hoFinitoDiTagliareUnaMisuraFittizia","console","log","nonVaBeneCosi","splice","quanteBarreConQuestaComb","allCombs","bestComb","scartoBestComb","scartoThisComb","trovaCombMigliore","statistichePiano","unshift","src_Pianoditaglio","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3931099.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Misura(props) {\r\n  return (\r\n    <div className=\"bb b--black-30 pl3 flex justify-between pr3 items-center\">\r\n      <p>\r\n        - <strong>{props.numStecche}</strong> stecche da{\" \"}\r\n        <strong>{props.misuraStecca}</strong> cm\r\n      </p>\r\n\r\n      <small className=\"\">\r\n        <input className=\"\" type=\"button\" value=\"elimina\" />\r\n      </small>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Misura;\r\n","import React from \"react\";\r\nimport Misura from \"./Misura\";\r\n\r\nfunction creaComponenteMisura(mis) {\r\n  return <Misura numStecche={mis[0]} misuraStecca={mis[1]} />;\r\n}\r\n\r\nfunction Ordine(props) {\r\n  return (\r\n    <div className=\"bg-white pa2 br4 pb4 bb bw2\">\r\n      {props.ordine.map(creaComponenteMisura)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ordine;\r\n","import React from \"react\";\r\n\r\n//[ 93, \"barre tagliate così: \",[199.2,199.2,139.2,109.2],\" con scarto: \",3.2000000000000455]\r\n\r\nfunction MisuraPiano(props) {\r\n  return (\r\n    <div className=\"bb b--black-30 pl3 flex justify-between pr3 items-center\">\r\n      <p>\r\n        - <strong>{props.combPiano[0]}</strong> barre tagliate così:{\" \"}\r\n        <strong>{props.combPiano[2].join(\", \")}</strong>\r\n        <br />\r\n        (scarto {Math.round(props.combPiano[4] * 100 + Number.EPSILON) /\r\n          100}{\" \"}\r\n        cm)\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MisuraPiano;\r\n","import React from \"react\";\r\nimport MisuraPiano from \"./MisuraPiano\";\r\n\r\n/*\r\nlet exampleOutput = [\r\n  [ \"Barre utilizzate: \", 329, \"Scarto totale: \", 3018.000000000002],\r\n  [ 93, \"barre tagliate così: \",[199.2,199.2,139.2,109.2],\" con scarto: \",3.2000000000000455],\r\n  [ 155,\"barre tagliate così: \",[139.2,139.2,139.2,139.2,89.2],\" con scarto: \",4],\r\n  [ 62, \"barre tagliate così: \",[119.2,119.2,119.2,109.2,89.2,89.2],\" con scarto: \",4.7999999999999545],\r\n  [ 15, \"barre tagliate così: \",[119.2,119.2,119.2,109.2,109.2],\" con scarto: \",74],\r\n  [ 4,  \"barre tagliate così: \",[119.2,119.2,119.2,119.2],\" con scarto: \",173.2],\r\n  \"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",\r\n  [139.2,89.2,109.2,119.2]\r\n]\r\n*/\r\n\r\nfunction Pianoditaglio(props) {\r\n  function creaComponenteMisura(comb) {\r\n    return <MisuraPiano combPiano={comb} />;\r\n  }\r\n\r\n  let profilo = props.profilo;\r\n  let barreNeiPacchi = 0;\r\n\r\n  if (profilo === \"AL/1\") {\r\n    barreNeiPacchi = 50;\r\n  } else if (profilo === \"AC/6\") {\r\n    barreNeiPacchi = 10;\r\n  } else if (profilo === \"AL/2HD\") {\r\n    barreNeiPacchi = 15;\r\n  } else if (profilo === \"AL/2\") {\r\n    barreNeiPacchi = 30;\r\n  }\r\n\r\n  if (props.piano) {\r\n    const piano = props.piano;\r\n\r\n    const barrePianoUtilizzate = piano[0][1];\r\n    const scartoPianoTotale = piano[0][3];\r\n    const pacchiNecessari = Math.floor(barrePianoUtilizzate / barreNeiPacchi);\r\n    const barreNecessarieOltreAiPacchi = barrePianoUtilizzate % barreNeiPacchi;\r\n\r\n    let pianoPerRender = piano.slice(0);\r\n\r\n    //console.log(pianoPerRender);\r\n\r\n    pianoPerRender.shift();\r\n    pianoPerRender.pop();\r\n    pianoPerRender.pop();\r\n\r\n    //FARE UNA FUNZIONE che si passa le stecche avanzate da tagliare e riunisce le misure guali con un 3x davanti (se ad es. la misura è ripetuta 3 volte). for loop con se le due misure sono uguali una viene splice-ata e l'altra si aggiunge un numx dove il nume parte da 1(x tutte le misure, in automatico, e poi aggiunge a num++)\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"bg-white pa2 br4 pb4 bb bw2\">\r\n          <p className=\"tc bb b--black-30\">\r\n            BARRE NECESSARIE: <strong>{barrePianoUtilizzate}</strong> (\r\n            <strong>{pacchiNecessari}</strong> pacchi e{\" \"}\r\n            <strong>{barreNecessarieOltreAiPacchi}</strong> stecche)\r\n            <br />\r\n            <br />\r\n          </p>\r\n          {pianoPerRender.map(creaComponenteMisura)}\r\n          <p className=\"bb b--black-30 pl3 pr3\">\r\n            Oh, e cerca tra gli sfridi qualcosa per tagliare ancora queste\r\n            stecche:\r\n            <br />\r\n            <br />\r\n            <strong>{piano[piano.length - 1].join(\",  \")}</strong>\r\n            <br />\r\n            <br />\r\n          </p>\r\n        </div>\r\n        {/*La statistica dello scarto sarà riattivata solo quando verrano contati solo gli scarti minori del maxScarto*/}\r\n        {/*<p>Scarto totale sull'intero ordine: {scartoPianoTotale}</p>*/}\r\n        <p>{/*props.piano.map(creaComponenteMisura)*/}</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div />;\r\n  }\r\n}\r\n\r\nexport default Pianoditaglio;\r\n","import React, { useState } from \"react\";\nimport Ordine from \"./Ordine\";\n//import Opzioni from \"./Opzioni\";\nimport Pianoditaglio from \"./Pianoditaglio\";\n\n//AGGIUNGERE GESTIONE SFRIDI\n\nfunction App() {\n  //VARIABILI CONTROLLATE NELLO STATE\n\n  const [teloCorrente, setTeloCorrente] = useState({\n    steccheCorrente: \"\",\n    misuraCorrente: \"\"\n  });\n\n  const [ordineSandbox, setOrdine] = useState([\n    [186, 199.2],\n    [714, 139.2],\n    [248, 119.2],\n    [186, 109.2],\n    [280, 89.2]\n  ]);\n\n  const [\n    pianoDiTaglioDaRenderizzare,\n    setPiano\n  ] = useState(/*[\n    [\"Barre utilizzate: \", 329, \"Scarto totale: \", 3018.000000000002],\n    [\n      93,\n      \"barre tagliate così: \",\n      [199.2, 199.2, 139.2, 109.2],\n      \" con scarto: \",\n      3.2000000000000455\n    ],\n    [\n      155,\n      \"barre tagliate così: \",\n      [139.2, 139.2, 139.2, 139.2, 89.2],\n      \" con scarto: \",\n      4\n    ],\n    [\n      62,\n      \"barre tagliate così: \",\n      [119.2, 119.2, 119.2, 109.2, 89.2, 89.2],\n      \" con scarto: \",\n      4.7999999999999545\n    ],\n    [\n      15,\n      \"barre tagliate così: \",\n      [119.2, 119.2, 119.2, 109.2, 109.2],\n      \" con scarto: \",\n      74\n    ],\n    [\n      4,\n      \"barre tagliate così: \",\n      [119.2, 119.2, 119.2, 119.2],\n      \" con scarto: \",\n      173.2\n    ],\n    \"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",\n    [139.2, 89.2, 109.2, 119.2]\n  ]*/);\n\n  const [sfridi, setSfridi] = useState([]);\n\n  const [profilo, setProfilo] = useState(\"AL/1\");\n\n  const [opzioni, setOpzioni] = useState({\n    maxScarto: 15,\n    minSfrido: 65,\n    larghezzaLama: 0.5\n  });\n\n  //FUNZIONI PER CAMBIARE LE VARIABILI NELLO STATO\n\n  function impostaOpzioni(event) {\n    const newValue = event.target.value;\n    const inputName = event.target.name;\n    setOpzioni(prevValue => {\n      if (inputName === \"opzioneScarto\") {\n        return {\n          maxScarto: newValue,\n          minSfrido: prevValue.minSfrido,\n          larghezzaLama: prevValue.larghezzaLama\n        };\n      } else if (inputName === \"opzioneSfrido\") {\n        return {\n          maxScarto: prevValue.maxScarto,\n          minSfrido: newValue,\n          larghezzaLama: prevValue.larghezzaLama\n        };\n      } else if (inputName === \"opzioneLama\") {\n        return {\n          maxScarto: prevValue.maxScarto,\n          minSfrido: prevValue.minSfrido,\n          larghezzaLama: newValue\n        };\n      }\n    });\n  }\n\n  function impostaProfilo(event) {\n    const newValue = event.target.value;\n    if (newValue === \"AL/1\") {\n      setProfilo(\"AL/1\");\n    } else if (newValue === \"AC/6\") {\n      setProfilo(\"AC/6\");\n    } else if (newValue === \"AL/2HD\") {\n      setProfilo(\"AL/2HD\");\n    } else if (newValue === \"AL/2\") {\n      setProfilo(\"AL/2\");\n    }\n  }\n\n  function impostaMisuraCorrente(event) {\n    const newValue = event.target.value;\n    const inputName = event.target.name;\n    setTeloCorrente(prevValue => {\n      if (inputName === \"numStecche\") {\n        return {\n          steccheCorrente: newValue,\n          misuraCorrente: prevValue.misuraCorrente\n        };\n      } else if (inputName === \"misura\") {\n        return {\n          steccheCorrente: prevValue.steccheCorrente,\n          misuraCorrente: newValue\n        };\n      }\n    });\n  }\n\n  function aggiungiMisuraCorrente(event) {\n    event.preventDefault();\n    setOrdine(prevValue => {\n      if (\n        teloCorrente.steccheCorrente &&\n        teloCorrente.misuraCorrente &&\n        (teloCorrente.steccheCorrente > 0 && teloCorrente.misuraCorrente > 0)\n      ) {\n        // const st = Number()\n        return [\n          ...prevValue,\n          [\n            Number(teloCorrente.steccheCorrente),\n            Number(teloCorrente.misuraCorrente)\n          ]\n        ];\n      } else {\n        return prevValue;\n      }\n    });\n    setTeloCorrente({\n      steccheCorrente: \"\",\n      misuraCorrente: \"\"\n    });\n  }\n\n  //FUNZIONONA PIANO DI TAGLIO\n  //PER IL MOMENTO QUESTA CALCOLA LA SOLUZIONE CON MENO SCARTO\n\n  //creare un comando per cui si può scegliere tra: soluzione con minor scarto (lasciando sfridi più lunghi di tot), soluzione con minor numero di tagli(per quando si ha fretta), soluzione che usa meno barre intere\n  function pianoSandbox() {\n    let ordineDaAnalizzare = ordineSandbox;\n\n    let tutteLeComb = [];\n    let combTemp = [];\n    let combMigliore;\n    let pianoDiTaglioCompleto = [];\n\n    let barreUtilizzate = 0;\n    let scartoTotale = 0;\n\n    let barreDaRecuperareAllaFine = [];\n\n    function ciStaAncora(misura, comb, barraRimanente = 650) {\n      let lungTemp =\n        comb.reduce(function(a, b) {\n          return a + b;\n        }, 0) +\n        opzioni.larghezzaLama * comb.length;\n      if (\n        misura < 650 - lungTemp &&\n        (650 - lungTemp - misura > opzioni.minSfrido ||\n          650 - lungTemp - misura < opzioni.maxScarto)\n      ) {\n        //console.log(\"ci sta ancora!\");\n        return true;\n      } else {\n        //console.log(`comb ${comb}: la misura ${misura} non sta più nei ${650-lungTemp} che rimangono alla barra, che era lunga ${barraRimanente}`);\n        return false;\n      }\n    }\n\n    function aggiungiCombConMisura(misura) {\n      combTemp = [];\n      combTemp.push(misura);\n    }\n\n    //questa si deve migliorare facendo in modo che vada ad operare solo sul livello di combo aggiunto in precedenza\n    function creaTutteLeCombPossibili(arrayMisure) {\n      let misPiccola = arrayMisure[arrayMisure.length - 1];\n\n      // PER OGNI MISURA CREO UNA NUOVA COMB\n      for (let i = 0; i < arrayMisure.length; i++) {\n        aggiungiCombConMisura(arrayMisure[i]);\n        tutteLeComb.push(combTemp);\n      }\n      //il numero dei loop che eseguo sotto è determinato dal numero massimo di tagli che posso fare in una singola barra, e cioé barra/misura più piccola dell'ordine\n      let numTagliMassimi = Math.round(650 / (misPiccola + 0.5));\n      //ad ogni giro si passa tutte le combiniazioni esistenti e aggiunge una combinazione per ogni misura dell'ordinead ognuna di esse.\n      for (let k = 0; k < numTagliMassimi; k++) {\n        let tempArrCombLength = tutteLeComb.length;\n        for (let i = 0; i < tempArrCombLength; i++) {\n          let barraRimasta =\n            650 -\n            tutteLeComb[i].reduce(function(a, b) {\n              return a + b;\n            }, 0);\n          for (let j = 0; j < arrayMisure.length; j++)\n            if (ciStaAncora(arrayMisure[j], tutteLeComb[i], barraRimasta)) {\n              let newComb = tutteLeComb[i].slice(0);\n              newComb.push(arrayMisure[j]);\n              tutteLeComb.push(newComb);\n            }\n        }\n      }\n    }\n\n    function trovaCombMigliore(allCombs) {\n      let bestComb = [allCombs[0]];\n      for (let i = 0; i < allCombs.length; i++) {\n        let scartoBestComb =\n          650 -\n          bestComb[0].reduce(function(a, b) {\n            return a + b;\n          }, 0);\n        let scartoThisComb =\n          650 -\n          allCombs[i].reduce(function(a, b) {\n            return a + b;\n          }, 0);\n\n        if (scartoBestComb > scartoThisComb) {\n          bestComb = [allCombs[i], scartoThisComb];\n        }\n      }\n      return bestComb;\n    }\n\n    function quanteBarreConQuestaComb(comb, ordine) {\n      let numBarreConQuestaComb = 0;\n      let hoFinitoDiTagliareUnaMisura = false;\n\n      let combFittizia = comb[0].slice(0);\n      let ordineFittizio = [];\n      for (let i = 0; i < ordine.length; i++) {\n        ordineFittizio[i] = ordine[i].slice();\n      }\n      let hoFinitoDiTagliareUnaMisuraFittizia = false;\n\n      let misuraDaTogliereDallOrdine;\n\n      //qui faccio prima un loop fittizio in cui decido quante barre servirebbero prima di esaurire una delle misure coinvolte, poi se l'ultima barra non è sfruttata completamente decido di tagliarne una di meno e aggiungere le stecche che mancavano al completamento ad un array da gestire poi in altro modo\n      while (!hoFinitoDiTagliareUnaMisuraFittizia) {\n        for (let i = 0; i < combFittizia.length; i++) {\n          for (let j = 0; j < ordineFittizio.length; j++) {\n            if (combFittizia[i] === ordineFittizio[j][1]) {\n              ordineFittizio[j][0] = ordineFittizio[j][0] - 1;\n              if (ordineFittizio[j][0] === 0) {\n                console.log(\n                  \"Ho finito di tagliare la misura fittizia \",\n                  ordineFittizio[j][1]\n                );\n                hoFinitoDiTagliareUnaMisuraFittizia = true;\n                misuraDaTogliereDallOrdine = ordineFittizio[j][1];\n              }\n            }\n          }\n        }\n        numBarreConQuestaComb++;\n      }\n\n      /*\n      console.log(\n        \"MISURA DA TOGLIERE DALL'ORDINE: \",\n        misuraDaTogliereDallOrdine\n      );\n      console.log(\"ORDINE: \" + ordine);\n      */\n\n      // va bene se tutte le barre previste per la combo sono sfruttate appieno, non va bene se l'ultima dà più stecche di quante ne servono\n      let nonVaBeneCosi = false;\n      for (let i = 0; i < ordineFittizio.length; i++) {\n        if (ordineFittizio[i][0] < 0) {\n          nonVaBeneCosi = true;\n          barreDaRecuperareAllaFine.push(ordineFittizio[i][1]);\n        }\n      }\n      // se non va bene ne taglio una in meno\n      if (nonVaBeneCosi) {\n        numBarreConQuestaComb--;\n      }\n      //poi ripeto il ciclo che ho fatto prima in modo fittizio ma questa volta toglie effettivamente dal numero di stecche richiesto nell'ordine le stecche tagliate con questa combo\n      if (!nonVaBeneCosi) {\n        while (!hoFinitoDiTagliareUnaMisura) {\n          for (let i = 0; i < comb[0].length; i++) {\n            for (let j = 0; j < ordine.length; j++) {\n              if (comb[0][i] === ordine[j][1]) {\n                ordine[j][0] = ordine[j][0] - 1;\n                if (ordine[j][0] === 0) {\n                  console.log(\"Ho finito di tagliare la misura \", ordine[j][1]);\n                  hoFinitoDiTagliareUnaMisura = true;\n                  //COSA MOLTO PERICOLOSA:\n                  ordine.splice(j, 1);\n                }\n              }\n            }\n          }\n          //numBarreConQuestaComb++ TOLTO DA QUI, MESSO DI LA\n        }\n      } else {\n        for (let i = 0; i < numBarreConQuestaComb; i++) {\n          for (let i = 0; i < comb[0].length; i++) {\n            for (let j = 0; j < ordine.length; j++) {\n              if (comb[0][i] === ordine[j][1]) {\n                ordine[j][0] = ordine[j][0] - 1;\n              }\n            }\n          }\n        }\n      }\n      //tolgo la misura di cui ho tutte le stecche tagliate dall'ordine, così da poter ricreare un nuovo insieme di combinazioni che non tenga più conto di quella misura\n      for (let i = 0; i < ordine.length; i++) {\n        if (ordine[i][1] === misuraDaTogliereDallOrdine) {\n          ordine.splice(i, 1);\n        }\n      }\n      /*\n      console.log(\"ORDINE DOPO AVER TOLTO MISURA: \" + ordine);\n      console.log(\n        \"RISULTATO: \" +\n          numBarreConQuestaComb +\n          \" barre tagliate cosÃ¬:  \" +\n          comb[0] +\n          \" con scarto: \" +\n          comb[1]\n      );\n      */\n\n      //CREO UNA RIGA NEL PIANO DI TAGLIO CON QUANTE BARRE DEVO TAGLIARE CON QUESTA COMBO, LE MISURE DELLA COMBO E LO SCARTO\n      pianoDiTaglioCompleto.push([\n        numBarreConQuestaComb,\n        \"barre tagliate così: \",\n        comb[0],\n        \" con scarto: \",\n        comb[1]\n      ]);\n    }\n\n    function pianoDiTaglio(ordine) {\n      tutteLeComb = [];\n\n      // creo un array solo delle misure\n      const arrayMisure = [];\n      ordine.forEach((e, i) => arrayMisure.push(e[1]));\n\n      // ORDINO L'ARRAY IN BASE ALLE MISURE\n      arrayMisure.sort(function(a, b) {\n        return b[1] - a[1];\n      });\n\n      creaTutteLeCombPossibili(arrayMisure);\n\n      combMigliore = trovaCombMigliore(tutteLeComb);\n\n      //console.log(\"combMigliore: \", combMigliore);\n\n      quanteBarreConQuestaComb(combMigliore, ordine);\n      //console.log(ordine);\n\n      if (ordine.length > 0) {\n        pianoDiTaglio(ordine);\n      }\n    }\n\n    function statistichePiano(piano) {\n      for (let i = 0; i < piano.length; i++) {\n        barreUtilizzate = barreUtilizzate + piano[i][0];\n        scartoTotale = scartoTotale + piano[i][4] * piano[i][0];\n      }\n    }\n\n    function pianoConStatistiche(ordine) {\n      pianoDiTaglio(ordine);\n      statistichePiano(pianoDiTaglioCompleto);\n      pianoDiTaglioCompleto.unshift([\n        \"Barre utilizzate: \",\n        barreUtilizzate,\n        \"Scarto totale: \",\n        scartoTotale\n      ]);\n      pianoDiTaglioCompleto.push(\n        \"(SOLUZ. TEMPORANEA) Infine taglia queste stecche dagli sfridi o da una nuova barra (se sono molte puoi calcolare un nuovo piano di taglio) :\",\n        barreDaRecuperareAllaFine\n      );\n    }\n\n    pianoConStatistiche(ordineDaAnalizzare);\n\n    //console.log(pianoDiTaglioCompleto);\n\n    setPiano(pianoDiTaglioCompleto);\n  }\n\n  //RENDERING DELLA PAGINA\n\n  return (\n    <div className=\"flex flex-wrap\">\n      <div className=\"bg-gray pt2 fl w-100-ns w-100-m w-40-l\">\n        {/*ORDINE*/}\n        <h1 className=\"pl2 pa1 bg-gold w-100\">ORDINE</h1>\n        <div className=\"pa3\">\n          <form\n            className=\"bg- br3 flex items-end pa2\n            \"\n          >\n            <label className=\"mr2\">\n              <strong>N. stecche</strong>\n              <br />\n              <br />\n              <input\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n                type=\"number\"\n                id=\"numStecche\"\n                name=\"numStecche\"\n                value={teloCorrente.steccheCorrente}\n                onChange={impostaMisuraCorrente}\n              />\n            </label>\n            <label className=\"mr2\">\n              <strong>Misura taglio</strong>\n              <br />\n              <br />\n              <input\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n                type=\"number\"\n                id=\"misura\"\n                name=\"misura\"\n                value={teloCorrente.misuraCorrente}\n                onChange={impostaMisuraCorrente}\n              />\n            </label>\n            <br />\n            <br />\n            <label>\n              <input\n                className=\"input-reset bg-blue white b ba b--black-20 pa2 mb2 db w-100\"\n                type=\"submit\"\n                value=\"Aggiungi\"\n                onClick={aggiungiMisuraCorrente}\n              />\n            </label>\n          </form>\n          <br />\n          <div className=\"pa2 br4\">\n            <Ordine ordine={ordineSandbox} />\n          </div>\n        </div>\n      </div>\n      <div className=\"bg-blue pt2 fl w-100-ns w-100-m w-20-l\">\n        {/*Opzioni*/}\n        <h1 className=\"pl2 pa1 bg-gold w-100\">OPZIONI</h1>\n        <div className=\"flex items-start flex-wrap pa3\">\n          <label className=\"w-third pa2\">\n            <strong>SCARTO MAX</strong>\n            <br />\n            <br />\n            <input\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n              name=\"opzioneScarto\"\n              type=\"number\"\n              value={opzioni.maxScarto}\n              onChange={impostaOpzioni}\n            />\n            <small id=\"name-desc\" class=\"f6 db mb2\">\n              Lunghezza massimo scarto\n            </small>\n          </label>\n          <label className=\"w-third pa2\">\n            <strong>SCARTO MIN</strong>\n            <br />\n            <br />\n            <input\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n              name=\"opzioneSfrido\"\n              type=\"number\"\n              value={opzioni.minSfrido}\n              onChange={impostaOpzioni}\n            />\n            <small id=\"name-desc\" class=\"f6 db mb2\">\n              Lunghezza minima sfrido\n            </small>\n          </label>\n          <label className=\"w-third pa2\">\n            <strong>LAMA</strong>\n            <br />\n            <br />\n            <input\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n              name=\"opzioneLama\"\n              type=\"number\"\n              value={opzioni.larghezzaLama}\n              onChange={impostaOpzioni}\n            />\n            <small id=\"name-desc\" class=\"f6 db mb2\">\n              Larghezza lama (imposta 0.5 per alluminio, 0.2 per acciaio):\n            </small>\n          </label>\n          <label className=\"w-third pa2\">\n            <strong>PROFILO</strong>\n            <br />\n            <br />\n            <fieldset\n              className=\"input-reset bw0 pa0 w-100\"\n              onChange={impostaProfilo}\n            >\n              <select\n                name=\"profilo\"\n                className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n              >\n                <option value=\"AL/1\" selected=\"selected\">\n                  AL/1\n                </option>\n                <option value=\"AC/6\">AC/6</option>\n                <option value=\"AL/2HD\">AL/2 HD</option>\n                <option value=\"AL/2\">AL/2</option>\n              </select>\n            </fieldset>\n            <small id=\"name-desc\" class=\"f6 db mb2\">\n              Info usata per calcolare il numero dei pacchi necessari:\n            </small>\n          </label>\n        </div>\n        {/*<small className=\"tc self-end\">creato da Damiano nel 2020.</small>*/}\n      </div>\n      <div className=\"bg-gold pt2 fl w-100-ns w-100-m w-40-l pa3\">\n        <h1 className=\"pl2 pa1\">PIANO</h1>\n        <p className=\"pl2 tc\">\n          <input\n            className=\"input-reset bg-blue b white bw2 bb-black bt-0 bl-0 br-0 pa2 mb2 w-50 br3\"\n            type=\"button\"\n            name=\"creaPiano\"\n            onClick={pianoSandbox}\n            value=\"CREA PIANO\"\n          />\n        </p>\n        <Pianoditaglio piano={pianoDiTaglioDaRenderizzare} profilo={profilo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}